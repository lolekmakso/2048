{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable padding-line-between-statements */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this._initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this._state = initialState;\n        this._status = \"idle\";\n        this._score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var _this1 = _this, _loop = function(j) {\n                        if (newRow[j] === newRow[j + 1] && newRow[j] !== 0) {\n                            newRow[j] += newRow[j + 1];\n                            _this1._score += newRow[j];\n                            newRow.splice(j + 1, 1);\n                            newRow.push(0);\n                            tempNumb.forEach(function(el) {\n                                if (el.toCol === j) {\n                                    el.toCol = j;\n                                    el.isMerged = true;\n                                    el.isMoved = el.fromCol !== j;\n                                } else if (el.toCol === j + 1) {\n                                    el.toCol = j + 1;\n                                    el.isMerged = true;\n                                    el.isMoved = true;\n                                }\n                                if (el.toCol > j + 1) el.toCol -= 1;\n                            });\n                        }\n                    };\n                    var _numbersPos;\n                    var tempNumb = [];\n                    var newRow = newState[i].filter(function(el, index) {\n                        if (el !== 0) tempNumb.push({\n                            fromRow: i,\n                            fromCol: index\n                        });\n                        return el !== 0;\n                    });\n                    tempNumb.forEach(function(el, index) {\n                        el.toRow = i;\n                        el.toCol = index;\n                        el.isMoved = el.toCol !== el.fromCol;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(new Array(newState[i].length - newRow.length).fill(0)));\n                    for(var j = 0; j < newRow.length - 1; j++)_loop(j);\n                    (_numbersPos = numbersPos).push.apply(_numbersPos, (0, $227c6742e0ff6f82$export$71511d61b312f219)(tempNumb));\n                    newState[i] = newRow;\n                };\n                if (this._status !== \"playing\") return [];\n                var newState = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this._state);\n                var numbersPos = [];\n                for(var i = 0; i < newState.length; i++)_loop(i);\n                this._state = newState;\n                if (numbersPos.some(function(el) {\n                    return el.isMoved || el.isMerged;\n                })) {\n                    this.spawnNumber();\n                    this.updateStatus();\n                }\n                return numbersPos;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var _this1 = _this, _loop = function(j) {\n                        if (newRow[j] === newRow[j - 1] && newRow[j] !== 0) {\n                            newRow[j] += newRow[j - 1];\n                            _this1._score += newRow[j];\n                            newRow.splice(j - 1, 1);\n                            newRow.unshift(0);\n                            tempNumb.forEach(function(el) {\n                                if (el.toCol === j) {\n                                    el.toCol = j;\n                                    el.isMerged = true;\n                                } else if (el.toCol === j - 1) {\n                                    el.toCol = j - 1;\n                                    el.isMerged = true;\n                                    el.isMoved = true;\n                                }\n                                if (el.toCol < j - 1) el.toCol += 1;\n                            });\n                        }\n                    };\n                    var _numbersPos;\n                    var tempNumb = [];\n                    var newRow = newState[i].filter(function(el, index) {\n                        if (el !== 0) tempNumb.push({\n                            fromRow: i,\n                            fromCol: index\n                        });\n                        return el !== 0;\n                    });\n                    tempNumb.forEach(function(el, index) {\n                        el.toRow = i;\n                        el.toCol = newState[i].length - newRow.length + index;\n                        el.isMoved = el.toCol !== el.fromCol;\n                    });\n                    newRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(new Array(newState[i].length - newRow.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow));\n                    for(var j = newRow.length - 1; j > 0; j--)_loop(j);\n                    (_numbersPos = numbersPos).push.apply(_numbersPos, (0, $227c6742e0ff6f82$export$71511d61b312f219)(tempNumb));\n                    newState[i] = newRow;\n                };\n                if (this._status !== \"playing\") return [];\n                var newState = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this._state);\n                var numbersPos = [];\n                for(var i = 0; i < newState.length; i++)_loop(i);\n                this._state = newState;\n                if (numbersPos.some(function(el) {\n                    return el.isMoved || el.isMerged;\n                })) {\n                    this.spawnNumber();\n                    this.updateStatus();\n                }\n                return numbersPos;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(i) {\n                    var _this1 = _this, _loop = function(j1) {\n                        if (newCol[j1] === newCol[j1 + 1] && newCol[j1] !== 0) {\n                            newCol[j1] += newCol[j1 + 1];\n                            _this1._score += newCol[j1];\n                            newCol.splice(j1 + 1, 1);\n                            newCol.push(0);\n                            tempNumb.forEach(function(el) {\n                                if (el.toRow === j1) {\n                                    el.toRow = j1;\n                                    el.isMerged = true;\n                                } else if (el.toRow === j1 + 1) {\n                                    el.toRow = j1 + 1;\n                                    el.isMerged = true;\n                                    el.isMoved = true;\n                                }\n                                if (el.toRow > j1 + 1) el.toRow -= 1;\n                            });\n                        }\n                    };\n                    var _numbersPos;\n                    var newCol = [];\n                    var tempNumb = [];\n                    for(var j = 0; j < newState.length; j++)if (newState[j][i] !== 0) {\n                        newCol.push(newState[j][i]);\n                        tempNumb.push({\n                            fromRow: j,\n                            fromCol: i\n                        });\n                    }\n                    tempNumb.forEach(function(el, index) {\n                        el.toRow = index;\n                        el.toCol = i;\n                        el.isMoved = el.toRow !== el.fromRow;\n                    });\n                    newCol = (0, $227c6742e0ff6f82$export$71511d61b312f219)(newCol).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(new Array(newState.length - newCol.length).fill(0)));\n                    for(var j1 = 0; j1 < newCol.length; j1++)_loop(j1);\n                    for(var j2 = 0; j2 < newState.length; j2++)newState[j2][i] = newCol[j2];\n                    (_numbersPos = numbersPos).push.apply(_numbersPos, (0, $227c6742e0ff6f82$export$71511d61b312f219)(tempNumb));\n                };\n                if (this._status !== \"playing\") return [];\n                var newState = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this._state);\n                var numbersPos = [];\n                for(var i = 0; i < newState[0].length; i++)_loop(i);\n                this._state = newState;\n                if (numbersPos.some(function(el) {\n                    return el.isMoved || el.isMerged;\n                })) {\n                    this.spawnNumber();\n                    this.updateStatus();\n                }\n                return numbersPos;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(i) {\n                    var _this1 = _this, _loop = function(j1) {\n                        if (newCol[j1] === newCol[j1 - 1] && newCol[j1] !== 0) {\n                            newCol[j1] += newCol[j1 - 1];\n                            _this1._score += newCol[j1];\n                            newCol.splice(j1 - 1, 1);\n                            newCol.unshift(0);\n                            tempNumb.forEach(function(el) {\n                                if (el.toRow === j1) {\n                                    el.toRow = j1;\n                                    el.isMerged = true;\n                                } else if (el.toRow === j1 - 1) {\n                                    el.toRow = j1 - 1;\n                                    el.isMerged = true;\n                                    el.isMoved = true;\n                                }\n                                if (el.toRow < j1 - 1) el.toRow += 1;\n                            });\n                        }\n                    };\n                    var _numbersPos;\n                    var newCol = [];\n                    var tempNumb = [];\n                    for(var j = 0; j < newState.length; j++)if (newState[j][i] !== 0) {\n                        newCol.push(newState[j][i]);\n                        tempNumb.push({\n                            fromRow: j,\n                            fromCol: i\n                        });\n                    }\n                    tempNumb.forEach(function(el, index) {\n                        el.toRow = newState.length - newCol.length + index;\n                        el.toCol = i;\n                        el.isMoved = el.toRow !== el.fromRow;\n                    });\n                    newCol = (0, $227c6742e0ff6f82$export$71511d61b312f219)(new Array(newState.length - newCol.length).fill(0)).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newCol));\n                    for(var j1 = newCol.length - 1; j1 > 0; j1--)_loop(j1);\n                    for(var j2 = 0; j2 < newState.length; j2++)newState[j2][i] = newCol[j2];\n                    (_numbersPos = numbersPos).push.apply(_numbersPos, (0, $227c6742e0ff6f82$export$71511d61b312f219)(tempNumb));\n                };\n                if (this._status !== \"playing\") return [];\n                var newState = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this._state);\n                var numbersPos = [];\n                for(var i = 0; i < newState[0].length; i++)_loop(i);\n                this._state = newState;\n                if (numbersPos.some(function(el) {\n                    return el.isMoved || el.isMerged;\n                })) {\n                    this.spawnNumber();\n                    this.updateStatus();\n                }\n                return numbersPos;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this._score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return structuredClone(this._state);\n            }\n        },\n        {\n            key: \"updateStatus\",\n            value: function updateStatus() {\n                if (this.isWin()) this._status = \"win\";\n                else if (!this.canMove()) this._status = \"lose\";\n            }\n        },\n        {\n            // Повертає поточний статус\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this._status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this._status === \"idle\") {\n                    this._status = \"playing\";\n                    this.spawnNumber();\n                    this.spawnNumber();\n                    this._score = 0;\n                }\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                this._state = structuredClone(this._initialState);\n                this._score = 0;\n                this._status = \"idle\";\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.reset();\n            }\n        },\n        {\n            key: \"spawnNumber\",\n            value: function spawnNumber() {\n                var freeCell = [];\n                if (!this._state.some(function(row) {\n                    return row.includes(0);\n                })) return false;\n                for(var i = 0; i < this._state.length; i++){\n                    for(var j = 0; j < this._state[i].length; j++)if (this._state[i][j] === 0) freeCell.push({\n                        x: j,\n                        y: i\n                    });\n                }\n                var randPos = Math.floor(Math.random() * freeCell.length);\n                var newXpos = freeCell[randPos].x;\n                var newYpos = freeCell[randPos].y;\n                var PROPABILITY_PERCENT = 10;\n                var valuePropability = Math.random() * 100;\n                var number = valuePropability <= PROPABILITY_PERCENT ? 4 : 2;\n                this._state[newYpos][newXpos] = number;\n                return true;\n            }\n        },\n        {\n            key: \"isWin\",\n            value: function isWin() {\n                return this._state.some(function(row) {\n                    return row.includes(2048);\n                });\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                if (this._state.some(function(row) {\n                    return row.includes(0);\n                })) return true;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var current = this._state[i][j];\n                    if (i < 3 && current === this._state[i + 1][j]) return true;\n                    if (j < 3 && current === this._state[i][j + 1]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$table = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$btnGame = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$isLocked = true;\n$197cd56b15c33885$var$btnGame.addEventListener(\"click\", function(e) {\n    if ($197cd56b15c33885$var$btnGame.classList.contains(\"start\")) {\n        if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n            $197cd56b15c33885$var$isLocked = false;\n            $197cd56b15c33885$var$start();\n            $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        }\n        $197cd56b15c33885$var$btnGame.blur();\n    }\n    if ($197cd56b15c33885$var$btnGame.classList.contains(\"restart\")) $197cd56b15c33885$var$restartGame();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$isLocked) return;\n    var prevState = $197cd56b15c33885$var$game.getState();\n    if (e.key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    if (e.key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    $197cd56b15c33885$var$drawState(prevState, $197cd56b15c33885$var$game.getState());\n    switch($197cd56b15c33885$var$game.getStatus()){\n        case \"playing\":\n            $197cd56b15c33885$var$isLocked = false;\n            $197cd56b15c33885$var$btnGame.textContent = \"Restart\";\n            $197cd56b15c33885$var$btnGame.classList.remove(\"start\");\n            $197cd56b15c33885$var$btnGame.classList.add(\"restart\");\n            break;\n        case \"win\":\n            $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n            $197cd56b15c33885$var$isLocked = true;\n            break;\n        case \"lose\":\n            $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n            $197cd56b15c33885$var$isLocked = true;\n            break;\n        case \"idle\":\n            $197cd56b15c33885$var$isLocked = true;\n            break;\n    }\n});\n// Start the game\nfunction $197cd56b15c33885$var$start() {\n    var prevState = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$game.start();\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$drawState(prevState, state);\n}\nfunction $197cd56b15c33885$var$drawState(prevState, newState) {\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n    for(var i = 0; i < newState.length; i++)for(var j = 0; j < newState[i].length; j++){\n        var cell = $197cd56b15c33885$var$getCell(i, j);\n        cell.className = \"field-cell\";\n        cell.textContent = \"\";\n        if (newState[i][j] !== 0) {\n            if (prevState[i][j] !== newState[i][j]) cell.classList.add(\"field-cell--animation\");\n            cell.classList.add(\"field-cell--\" + newState[i][j]);\n            cell.textContent = newState[i][j].toString();\n        }\n    }\n}\nfunction $197cd56b15c33885$var$getCell(numRow, numCol) {\n    var rows = $197cd56b15c33885$var$table.querySelectorAll(\".field-row\");\n    return rows[numRow].querySelectorAll(\".field-cell\")[numCol];\n}\nfunction $197cd56b15c33885$var$restartGame() {\n    var prevState = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$drawState(prevState, $197cd56b15c33885$var$game.getState());\n    $197cd56b15c33885$var$btnGame.textContent = \"Start\";\n    $197cd56b15c33885$var$btnGame.classList.remove(\"restart\");\n    $197cd56b15c33885$var$btnGame.classList.add(\"start\");\n    $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    $197cd56b15c33885$var$btnGame.blur();\n}\n\n})();\n//# sourceMappingURL=index.fd8df00b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst table = document.querySelector('.game-field');\nconst btnGame = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nlet isLocked = true;\n\nbtnGame.addEventListener('click', function(e) {\n  if (btnGame.classList.contains('start')) {\n    if (game.getStatus() === 'idle') {\n      isLocked = false;\n      start();\n      messageStart.classList.add('hidden');\n    }\n    btnGame.blur();\n  }\n\n  if (btnGame.classList.contains('restart')) {\n    restartGame();\n  }\n});\n\ndocument.addEventListener('keydown', function(e) {\n  if (isLocked) {\n    return;\n  }\n\n  const prevState = game.getState();\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  drawState(prevState, game.getState());\n\n  switch (game.getStatus()) {\n    case 'playing':\n      isLocked = false;\n      btnGame.textContent = 'Restart';\n      btnGame.classList.remove('start');\n      btnGame.classList.add('restart');\n      break;\n    case 'win':\n      messageWin.classList.remove('hidden');\n      isLocked = true;\n      break;\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      isLocked = true;\n      break;\n    case 'idle':\n      isLocked = true;\n      break;\n  }\n});\n\n// Start the game\nfunction start() {\n  const prevState = game.getState();\n\n  game.start();\n\n  const state = game.getState();\n\n  drawState(prevState, state);\n}\n\nfunction drawState(prevState, newState) {\n  score.textContent = game.getScore();\n\n  for (let i = 0; i < newState.length; i++) {\n    for (let j = 0; j < newState[i].length; j++) {\n      const cell = getCell(i, j);\n\n      cell.className = 'field-cell';\n      cell.textContent = '';\n\n      if (newState[i][j] !== 0) {\n        if (prevState[i][j] !== newState[i][j]) {\n          cell.classList.add('field-cell--animation');\n        }\n        cell.classList.add('field-cell--' + newState[i][j]);\n        cell.textContent = newState[i][j].toString();\n      }\n    }\n  }\n}\n\nfunction getCell(numRow, numCol) {\n  const rows = table.querySelectorAll('.field-row');\n\n  return rows[numRow].querySelectorAll('.field-cell')[numCol];\n}\n\nfunction restartGame() {\n  const prevState = game.getState();\n\n  game.restart();\n  drawState(prevState, game.getState());\n  btnGame.textContent = 'Start';\n  btnGame.classList.remove('restart');\n  btnGame.classList.add('start');\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  btnGame.blur();\n}\n","/* eslint-disable padding-line-between-statements */\n'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this._initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this._state = initialState;\n    this._status = 'idle';\n    this._score = 0;\n  }\n\n  moveLeft() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState.length; i++) {\n      const tempNumb = [];\n      let newRow = newState[i].filter((el, index) => {\n        if (el !== 0) {\n          tempNumb.push({\n            fromRow: i,\n            fromCol: index,\n          });\n        }\n        return el !== 0;\n      });\n      tempNumb.forEach((el, index) => {\n        el.toRow = i;\n        el.toCol = index;\n        el.isMoved = el.toCol !== el.fromCol;\n      });\n      newRow = [\n        ...newRow,\n        ...new Array(newState[i].length - newRow.length).fill(0),\n      ];\n\n      for (let j = 0; j < newRow.length - 1; j++) {\n        if (newRow[j] === newRow[j + 1] && newRow[j] !== 0) {\n          newRow[j] += newRow[j + 1];\n          this._score += newRow[j];\n          newRow.splice(j + 1, 1);\n          newRow.push(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toCol === j) {\n              el.toCol = j;\n              el.isMerged = true;\n              el.isMoved = el.fromCol !== j;\n            } else if (el.toCol === j + 1) {\n              el.toCol = j + 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toCol > j + 1) {\n              el.toCol -= 1;\n            }\n          });\n        }\n      }\n      numbersPos.push(...tempNumb);\n      newState[i] = newRow;\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveRight() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState.length; i++) {\n      const tempNumb = [];\n      let newRow = newState[i].filter((el, index) => {\n        if (el !== 0) {\n          tempNumb.push({\n            fromRow: i,\n            fromCol: index,\n          });\n        }\n        return el !== 0;\n      });\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = i;\n        el.toCol = newState[i].length - newRow.length + index;\n        el.isMoved = el.toCol !== el.fromCol;\n      });\n\n      newRow = [\n        ...new Array(newState[i].length - newRow.length).fill(0),\n        ...newRow,\n      ];\n\n      for (let j = newRow.length - 1; j > 0; j--) {\n        if (newRow[j] === newRow[j - 1] && newRow[j] !== 0) {\n          newRow[j] += newRow[j - 1];\n          this._score += newRow[j];\n          newRow.splice(j - 1, 1);\n          newRow.unshift(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toCol === j) {\n              el.toCol = j;\n              el.isMerged = true;\n            } else if (el.toCol === j - 1) {\n              el.toCol = j - 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toCol < j - 1) {\n              el.toCol += 1;\n            }\n          });\n        }\n      }\n      numbersPos.push(...tempNumb);\n      newState[i] = newRow;\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveUp() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState[0].length; i++) {\n      let newCol = [];\n      const tempNumb = [];\n\n      for (let j = 0; j < newState.length; j++) {\n        if (newState[j][i] !== 0) {\n          newCol.push(newState[j][i]);\n          tempNumb.push({\n            fromRow: j,\n            fromCol: i,\n          });\n        }\n      }\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = index;\n        el.toCol = i;\n        el.isMoved = el.toRow !== el.fromRow;\n      });\n\n      newCol = [\n        ...newCol,\n        ...new Array(newState.length - newCol.length).fill(0),\n      ];\n\n      for (let j = 0; j < newCol.length; j++) {\n        if (newCol[j] === newCol[j + 1] && newCol[j] !== 0) {\n          newCol[j] += newCol[j + 1];\n          this._score += newCol[j];\n          newCol.splice(j + 1, 1);\n          newCol.push(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toRow === j) {\n              el.toRow = j;\n              el.isMerged = true;\n            } else if (el.toRow === j + 1) {\n              el.toRow = j + 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toRow > j + 1) {\n              el.toRow -= 1;\n            }\n          });\n        }\n      }\n      for (let j = 0; j < newState.length; j++) {\n        newState[j][i] = newCol[j];\n      }\n      numbersPos.push(...tempNumb);\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveDown() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState[0].length; i++) {\n      let newCol = [];\n      const tempNumb = [];\n\n      for (let j = 0; j < newState.length; j++) {\n        if (newState[j][i] !== 0) {\n          newCol.push(newState[j][i]);\n          tempNumb.push({\n            fromRow: j,\n            fromCol: i,\n          });\n        }\n      }\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = newState.length - newCol.length + index;\n        el.toCol = i;\n        el.isMoved = el.toRow !== el.fromRow;\n      });\n\n      newCol = [\n        ...new Array(newState.length - newCol.length).fill(0),\n        ...newCol,\n      ];\n\n      for (let j = newCol.length - 1; j > 0; j--) {\n        if (newCol[j] === newCol[j - 1] && newCol[j] !== 0) {\n          newCol[j] += newCol[j - 1];\n          this._score += newCol[j];\n          newCol.splice(j - 1, 1);\n          newCol.unshift(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toRow === j) {\n              el.toRow = j;\n              el.isMerged = true;\n            } else if (el.toRow === j - 1) {\n              el.toRow = j - 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toRow < j - 1) {\n              el.toRow += 1;\n            }\n          });\n        }\n      }\n\n      for (let j = 0; j < newState.length; j++) {\n        newState[j][i] = newCol[j];\n      }\n      numbersPos.push(...tempNumb);\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  getScore() {\n    return this._score;\n  }\n\n  getState() {\n    return structuredClone(this._state);\n  }\n\n  updateStatus() {\n    if (this.isWin()) {\n      this._status = 'win';\n    } else if (!this.canMove()) {\n      this._status = 'lose';\n    }\n  }\n\n  // Повертає поточний статус\n  getStatus() {\n    return this._status;\n  }\n\n  start() {\n    if (this._status === 'idle') {\n      this._status = 'playing';\n      this.spawnNumber();\n      this.spawnNumber();\n      this._score = 0;\n    }\n  }\n\n  reset() {\n    this._state = structuredClone(this._initialState);\n    this._score = 0;\n    this._status = 'idle';\n  }\n\n  restart() {\n    this.reset();\n  }\n\n  spawnNumber() {\n    const freeCell = [];\n    if (!this._state.some((row) => row.includes(0))) {\n      return false;\n    }\n    for (let i = 0; i < this._state.length; i++) {\n      for (let j = 0; j < this._state[i].length; j++) {\n        if (this._state[i][j] === 0) {\n          freeCell.push({\n            x: j, y: i,\n          });\n        }\n      }\n    }\n\n    const randPos = Math.floor(Math.random() * freeCell.length);\n    const newXpos = freeCell[randPos].x;\n    const newYpos = freeCell[randPos].y;\n\n    const PROPABILITY_PERCENT = 10;\n    const valuePropability = Math.random() * 100;\n    const number = valuePropability <= PROPABILITY_PERCENT ? 4 : 2;\n\n    this._state[newYpos][newXpos] = number;\n\n    return true;\n  }\n\n  isWin() {\n    return this._state.some((row) => row.includes(2048));\n  }\n\n  canMove() {\n    if (this._state.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this._state[i][j];\n        if (i < 3 && current === this._state[i + 1][j]) {\n          return true;\n        }\n        if (j < 3 && current === this._state[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","_initialState","_state","_status","_score","key","value","_this","_loop","j","newRow","_this1","splice","push","tempNumb","forEach","el","toCol","isMerged","isMoved","fromCol","newState","filter","index","fromRow","toRow","concat","fill","numbersPos","apply","some","spawnNumber","updateStatus","unshift","j1","newCol","j2","structuredClone","isWin","canMove","reset","freeCell","row","includes","x","y","randPos","Math","floor","random","newXpos","newYpos","valuePropability","current","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$table","document","querySelector","$197cd56b15c33885$var$btnGame","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$score","$197cd56b15c33885$var$isLocked","$197cd56b15c33885$var$drawState","prevState","textContent","getScore","numRow","numCol","cell","rows","querySelectorAll","className","classList","add","addEventListener","e","contains","getStatus","getState","start","blur","restart","remove","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.fd8df00b.js.map"}