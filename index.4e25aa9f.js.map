{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable padding-line-between-statements */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this._initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this._state = initialState;\n        this._status = \"idle\";\n        this._score = 0;\n    }\n    moveLeft() {\n        if (this._status !== \"playing\") return [];\n        const newState = [\n            ...this._state\n        ];\n        const numbersPos = [];\n        for(let i = 0; i < newState.length; i++){\n            const tempNumb = [];\n            let newRow = newState[i].filter((el, index)=>{\n                if (el !== 0) tempNumb.push({\n                    fromRow: i,\n                    fromCol: index\n                });\n                return el !== 0;\n            });\n            tempNumb.forEach((el, index)=>{\n                el.toRow = i;\n                el.toCol = index;\n                el.isMoved = el.toCol !== el.fromCol;\n            });\n            newRow = [\n                ...newRow,\n                ...new Array(newState[i].length - newRow.length).fill(0)\n            ];\n            for(let j = 0; j < newRow.length - 1; j++)if (newRow[j] === newRow[j + 1] && newRow[j] !== 0) {\n                newRow[j] += newRow[j + 1];\n                this._score += newRow[j];\n                newRow.splice(j + 1, 1);\n                newRow.push(0);\n                tempNumb.forEach((el)=>{\n                    if (el.toCol === j) {\n                        el.toCol = j;\n                        el.isMerged = true;\n                        el.isMoved = el.fromCol !== j;\n                    } else if (el.toCol === j + 1) {\n                        el.toCol = j + 1;\n                        el.isMerged = true;\n                        el.isMoved = true;\n                    }\n                    if (el.toCol > j + 1) el.toCol -= 1;\n                });\n            }\n            numbersPos.push(...tempNumb);\n            newState[i] = newRow;\n        }\n        this._state = newState;\n        if (numbersPos.some((el)=>el.isMoved || el.isMerged)) {\n            this.spawnNumber();\n            this.updateStatus();\n        }\n        return numbersPos;\n    }\n    moveRight() {\n        if (this._status !== \"playing\") return [];\n        const newState = [\n            ...this._state\n        ];\n        const numbersPos = [];\n        for(let i = 0; i < newState.length; i++){\n            const tempNumb = [];\n            let newRow = newState[i].filter((el, index)=>{\n                if (el !== 0) tempNumb.push({\n                    fromRow: i,\n                    fromCol: index\n                });\n                return el !== 0;\n            });\n            tempNumb.forEach((el, index)=>{\n                el.toRow = i;\n                el.toCol = newState[i].length - newRow.length + index;\n                el.isMoved = el.toCol !== el.fromCol;\n            });\n            newRow = [\n                ...new Array(newState[i].length - newRow.length).fill(0),\n                ...newRow\n            ];\n            for(let j = newRow.length - 1; j > 0; j--)if (newRow[j] === newRow[j - 1] && newRow[j] !== 0) {\n                newRow[j] += newRow[j - 1];\n                this._score += newRow[j];\n                newRow.splice(j - 1, 1);\n                newRow.unshift(0);\n                tempNumb.forEach((el)=>{\n                    if (el.toCol === j) {\n                        el.toCol = j;\n                        el.isMerged = true;\n                    } else if (el.toCol === j - 1) {\n                        el.toCol = j - 1;\n                        el.isMerged = true;\n                        el.isMoved = true;\n                    }\n                    if (el.toCol < j - 1) el.toCol += 1;\n                });\n            }\n            numbersPos.push(...tempNumb);\n            newState[i] = newRow;\n        }\n        this._state = newState;\n        if (numbersPos.some((el)=>el.isMoved || el.isMerged)) {\n            this.spawnNumber();\n            this.updateStatus();\n        }\n        return numbersPos;\n    }\n    moveUp() {\n        if (this._status !== \"playing\") return [];\n        const newState = [\n            ...this._state\n        ];\n        const numbersPos = [];\n        for(let i = 0; i < newState[0].length; i++){\n            let newCol = [];\n            const tempNumb = [];\n            for(let j = 0; j < newState.length; j++)if (newState[j][i] !== 0) {\n                newCol.push(newState[j][i]);\n                tempNumb.push({\n                    fromRow: j,\n                    fromCol: i\n                });\n            }\n            tempNumb.forEach((el, index)=>{\n                el.toRow = index;\n                el.toCol = i;\n                el.isMoved = el.toRow !== el.fromRow;\n            });\n            newCol = [\n                ...newCol,\n                ...new Array(newState.length - newCol.length).fill(0)\n            ];\n            for(let j = 0; j < newCol.length; j++)if (newCol[j] === newCol[j + 1] && newCol[j] !== 0) {\n                newCol[j] += newCol[j + 1];\n                this._score += newCol[j];\n                newCol.splice(j + 1, 1);\n                newCol.push(0);\n                tempNumb.forEach((el)=>{\n                    if (el.toRow === j) {\n                        el.toRow = j;\n                        el.isMerged = true;\n                    } else if (el.toRow === j + 1) {\n                        el.toRow = j + 1;\n                        el.isMerged = true;\n                        el.isMoved = true;\n                    }\n                    if (el.toRow > j + 1) el.toRow -= 1;\n                });\n            }\n            for(let j = 0; j < newState.length; j++)newState[j][i] = newCol[j];\n            numbersPos.push(...tempNumb);\n        }\n        this._state = newState;\n        if (numbersPos.some((el)=>el.isMoved || el.isMerged)) {\n            this.spawnNumber();\n            this.updateStatus();\n        }\n        return numbersPos;\n    }\n    moveDown() {\n        if (this._status !== \"playing\") return [];\n        const newState = [\n            ...this._state\n        ];\n        const numbersPos = [];\n        for(let i = 0; i < newState[0].length; i++){\n            let newCol = [];\n            const tempNumb = [];\n            for(let j = 0; j < newState.length; j++)if (newState[j][i] !== 0) {\n                newCol.push(newState[j][i]);\n                tempNumb.push({\n                    fromRow: j,\n                    fromCol: i\n                });\n            }\n            tempNumb.forEach((el, index)=>{\n                el.toRow = newState.length - newCol.length + index;\n                el.toCol = i;\n                el.isMoved = el.toRow !== el.fromRow;\n            });\n            newCol = [\n                ...new Array(newState.length - newCol.length).fill(0),\n                ...newCol\n            ];\n            for(let j = newCol.length - 1; j > 0; j--)if (newCol[j] === newCol[j - 1] && newCol[j] !== 0) {\n                newCol[j] += newCol[j - 1];\n                this._score += newCol[j];\n                newCol.splice(j - 1, 1);\n                newCol.unshift(0);\n                tempNumb.forEach((el)=>{\n                    if (el.toRow === j) {\n                        el.toRow = j;\n                        el.isMerged = true;\n                    } else if (el.toRow === j - 1) {\n                        el.toRow = j - 1;\n                        el.isMerged = true;\n                        el.isMoved = true;\n                    }\n                    if (el.toRow < j - 1) el.toRow += 1;\n                });\n            }\n            for(let j = 0; j < newState.length; j++)newState[j][i] = newCol[j];\n            numbersPos.push(...tempNumb);\n        }\n        this._state = newState;\n        if (numbersPos.some((el)=>el.isMoved || el.isMerged)) {\n            this.spawnNumber();\n            this.updateStatus();\n        }\n        return numbersPos;\n    }\n    getScore() {\n        return this._score;\n    }\n    getState() {\n        return structuredClone(this._state);\n    }\n    updateStatus() {\n        if (this.isWin()) this._status = \"win\";\n        else if (!this.canMove()) this._status = \"lose\";\n    }\n    // Повертає поточний статус\n    getStatus() {\n        return this._status;\n    }\n    start() {\n        if (this._status === \"idle\") {\n            this._status = \"playing\";\n            this.spawnNumber();\n            this.spawnNumber();\n            this._score = 0;\n        }\n    }\n    reset() {\n        this._state = structuredClone(this._initialState);\n        this._score = 0;\n        this._status = \"idle\";\n    }\n    restart() {\n        this.reset();\n    }\n    spawnNumber() {\n        const freeCell = [];\n        if (!this._state.some((row)=>row.includes(0))) return false;\n        for(let i = 0; i < this._state.length; i++){\n            for(let j = 0; j < this._state[i].length; j++)if (this._state[i][j] === 0) freeCell.push({\n                x: j,\n                y: i\n            });\n        }\n        const randPos = Math.floor(Math.random() * freeCell.length);\n        const newXpos = freeCell[randPos].x;\n        const newYpos = freeCell[randPos].y;\n        const PROPABILITY_PERCENT = 10;\n        const valuePropability = Math.random() * 100;\n        const number = valuePropability <= PROPABILITY_PERCENT ? 4 : 2;\n        this._state[newYpos][newXpos] = number;\n        return true;\n    }\n    isWin() {\n        return this._state.some((row)=>row.includes(2048));\n    }\n    canMove() {\n        if (this._state.some((row)=>row.includes(0))) return true;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const current = this._state[i][j];\n            if (i < 3 && current === this._state[i + 1][j]) return true;\n            if (j < 3 && current === this._state[i][j + 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$btnGame = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nlet $09e991522ca7e64e$var$isLocked = true;\n$09e991522ca7e64e$var$btnGame.addEventListener(\"click\", function(e) {\n    if ($09e991522ca7e64e$var$btnGame.classList.contains(\"start\")) {\n        if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n            $09e991522ca7e64e$var$isLocked = false;\n            $09e991522ca7e64e$var$start();\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        }\n        $09e991522ca7e64e$var$btnGame.blur();\n    }\n    if ($09e991522ca7e64e$var$btnGame.classList.contains(\"restart\")) $09e991522ca7e64e$var$restartGame();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($09e991522ca7e64e$var$isLocked) return;\n    const prevState = $09e991522ca7e64e$var$game.getState();\n    if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    $09e991522ca7e64e$var$drawState(prevState, $09e991522ca7e64e$var$game.getState());\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"playing\":\n            $09e991522ca7e64e$var$isLocked = false;\n            $09e991522ca7e64e$var$btnGame.textContent = \"Restart\";\n            $09e991522ca7e64e$var$btnGame.classList.remove(\"start\");\n            $09e991522ca7e64e$var$btnGame.classList.add(\"restart\");\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$isLocked = true;\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$isLocked = true;\n            break;\n        case \"idle\":\n            $09e991522ca7e64e$var$isLocked = true;\n            break;\n    }\n});\n// Start the game\nfunction $09e991522ca7e64e$var$start() {\n    const prevState = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$game.start();\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$drawState(prevState, state);\n}\nfunction $09e991522ca7e64e$var$drawState(prevState, newState) {\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    for(let i = 0; i < newState.length; i++)for(let j = 0; j < newState[i].length; j++){\n        const cell = $09e991522ca7e64e$var$getCell(i, j);\n        cell.className = \"field-cell\";\n        cell.textContent = \"\";\n        if (newState[i][j] !== 0) {\n            if (prevState[i][j] !== newState[i][j]) cell.classList.add(\"field-cell--animation\");\n            cell.classList.add(\"field-cell--\" + newState[i][j]);\n            cell.textContent = newState[i][j].toString();\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$getCell(numRow, numCol) {\n    const rows = $09e991522ca7e64e$var$table.querySelectorAll(\".field-row\");\n    return rows[numRow].querySelectorAll(\".field-cell\")[numCol];\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    const prevState = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$drawState(prevState, $09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$btnGame.textContent = \"Start\";\n    $09e991522ca7e64e$var$btnGame.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$btnGame.classList.add(\"start\");\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$btnGame.blur();\n}\n\n\n//# sourceMappingURL=index.4e25aa9f.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst table = document.querySelector('.game-field');\nconst btnGame = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\nlet isLocked = true;\n\nbtnGame.addEventListener('click', function(e) {\n  if (btnGame.classList.contains('start')) {\n    if (game.getStatus() === 'idle') {\n      isLocked = false;\n      start();\n      messageStart.classList.add('hidden');\n    }\n    btnGame.blur();\n  }\n\n  if (btnGame.classList.contains('restart')) {\n    restartGame();\n  }\n});\n\ndocument.addEventListener('keydown', function(e) {\n  if (isLocked) {\n    return;\n  }\n\n  const prevState = game.getState();\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  drawState(prevState, game.getState());\n\n  switch (game.getStatus()) {\n    case 'playing':\n      isLocked = false;\n      btnGame.textContent = 'Restart';\n      btnGame.classList.remove('start');\n      btnGame.classList.add('restart');\n      break;\n    case 'win':\n      messageWin.classList.remove('hidden');\n      isLocked = true;\n      break;\n    case 'lose':\n      messageLose.classList.remove('hidden');\n      isLocked = true;\n      break;\n    case 'idle':\n      isLocked = true;\n      break;\n  }\n});\n\n// Start the game\nfunction start() {\n  const prevState = game.getState();\n\n  game.start();\n\n  const state = game.getState();\n\n  drawState(prevState, state);\n}\n\nfunction drawState(prevState, newState) {\n  score.textContent = game.getScore();\n\n  for (let i = 0; i < newState.length; i++) {\n    for (let j = 0; j < newState[i].length; j++) {\n      const cell = getCell(i, j);\n\n      cell.className = 'field-cell';\n      cell.textContent = '';\n\n      if (newState[i][j] !== 0) {\n        if (prevState[i][j] !== newState[i][j]) {\n          cell.classList.add('field-cell--animation');\n        }\n        cell.classList.add('field-cell--' + newState[i][j]);\n        cell.textContent = newState[i][j].toString();\n      }\n    }\n  }\n}\n\nfunction getCell(numRow, numCol) {\n  const rows = table.querySelectorAll('.field-row');\n\n  return rows[numRow].querySelectorAll('.field-cell')[numCol];\n}\n\nfunction restartGame() {\n  const prevState = game.getState();\n\n  game.restart();\n  drawState(prevState, game.getState());\n  btnGame.textContent = 'Start';\n  btnGame.classList.remove('restart');\n  btnGame.classList.add('start');\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  btnGame.blur();\n}\n","/* eslint-disable padding-line-between-statements */\n'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this._initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this._state = initialState;\n    this._status = 'idle';\n    this._score = 0;\n  }\n\n  moveLeft() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState.length; i++) {\n      const tempNumb = [];\n      let newRow = newState[i].filter((el, index) => {\n        if (el !== 0) {\n          tempNumb.push({\n            fromRow: i,\n            fromCol: index,\n          });\n        }\n        return el !== 0;\n      });\n      tempNumb.forEach((el, index) => {\n        el.toRow = i;\n        el.toCol = index;\n        el.isMoved = el.toCol !== el.fromCol;\n      });\n      newRow = [\n        ...newRow,\n        ...new Array(newState[i].length - newRow.length).fill(0),\n      ];\n\n      for (let j = 0; j < newRow.length - 1; j++) {\n        if (newRow[j] === newRow[j + 1] && newRow[j] !== 0) {\n          newRow[j] += newRow[j + 1];\n          this._score += newRow[j];\n          newRow.splice(j + 1, 1);\n          newRow.push(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toCol === j) {\n              el.toCol = j;\n              el.isMerged = true;\n              el.isMoved = el.fromCol !== j;\n            } else if (el.toCol === j + 1) {\n              el.toCol = j + 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toCol > j + 1) {\n              el.toCol -= 1;\n            }\n          });\n        }\n      }\n      numbersPos.push(...tempNumb);\n      newState[i] = newRow;\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveRight() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState.length; i++) {\n      const tempNumb = [];\n      let newRow = newState[i].filter((el, index) => {\n        if (el !== 0) {\n          tempNumb.push({\n            fromRow: i,\n            fromCol: index,\n          });\n        }\n        return el !== 0;\n      });\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = i;\n        el.toCol = newState[i].length - newRow.length + index;\n        el.isMoved = el.toCol !== el.fromCol;\n      });\n\n      newRow = [\n        ...new Array(newState[i].length - newRow.length).fill(0),\n        ...newRow,\n      ];\n\n      for (let j = newRow.length - 1; j > 0; j--) {\n        if (newRow[j] === newRow[j - 1] && newRow[j] !== 0) {\n          newRow[j] += newRow[j - 1];\n          this._score += newRow[j];\n          newRow.splice(j - 1, 1);\n          newRow.unshift(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toCol === j) {\n              el.toCol = j;\n              el.isMerged = true;\n            } else if (el.toCol === j - 1) {\n              el.toCol = j - 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toCol < j - 1) {\n              el.toCol += 1;\n            }\n          });\n        }\n      }\n      numbersPos.push(...tempNumb);\n      newState[i] = newRow;\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveUp() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState[0].length; i++) {\n      let newCol = [];\n      const tempNumb = [];\n\n      for (let j = 0; j < newState.length; j++) {\n        if (newState[j][i] !== 0) {\n          newCol.push(newState[j][i]);\n          tempNumb.push({\n            fromRow: j,\n            fromCol: i,\n          });\n        }\n      }\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = index;\n        el.toCol = i;\n        el.isMoved = el.toRow !== el.fromRow;\n      });\n\n      newCol = [\n        ...newCol,\n        ...new Array(newState.length - newCol.length).fill(0),\n      ];\n\n      for (let j = 0; j < newCol.length; j++) {\n        if (newCol[j] === newCol[j + 1] && newCol[j] !== 0) {\n          newCol[j] += newCol[j + 1];\n          this._score += newCol[j];\n          newCol.splice(j + 1, 1);\n          newCol.push(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toRow === j) {\n              el.toRow = j;\n              el.isMerged = true;\n            } else if (el.toRow === j + 1) {\n              el.toRow = j + 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toRow > j + 1) {\n              el.toRow -= 1;\n            }\n          });\n        }\n      }\n      for (let j = 0; j < newState.length; j++) {\n        newState[j][i] = newCol[j];\n      }\n      numbersPos.push(...tempNumb);\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  moveDown() {\n    if (this._status !== 'playing') {\n      return [];\n    }\n\n    const newState = [...this._state];\n    const numbersPos = [];\n\n    for (let i = 0; i < newState[0].length; i++) {\n      let newCol = [];\n      const tempNumb = [];\n\n      for (let j = 0; j < newState.length; j++) {\n        if (newState[j][i] !== 0) {\n          newCol.push(newState[j][i]);\n          tempNumb.push({\n            fromRow: j,\n            fromCol: i,\n          });\n        }\n      }\n\n      tempNumb.forEach((el, index) => {\n        el.toRow = newState.length - newCol.length + index;\n        el.toCol = i;\n        el.isMoved = el.toRow !== el.fromRow;\n      });\n\n      newCol = [\n        ...new Array(newState.length - newCol.length).fill(0),\n        ...newCol,\n      ];\n\n      for (let j = newCol.length - 1; j > 0; j--) {\n        if (newCol[j] === newCol[j - 1] && newCol[j] !== 0) {\n          newCol[j] += newCol[j - 1];\n          this._score += newCol[j];\n          newCol.splice(j - 1, 1);\n          newCol.unshift(0);\n\n          tempNumb.forEach((el) => {\n            if (el.toRow === j) {\n              el.toRow = j;\n              el.isMerged = true;\n            } else if (el.toRow === j - 1) {\n              el.toRow = j - 1;\n              el.isMerged = true;\n              el.isMoved = true;\n            }\n            if (el.toRow < j - 1) {\n              el.toRow += 1;\n            }\n          });\n        }\n      }\n\n      for (let j = 0; j < newState.length; j++) {\n        newState[j][i] = newCol[j];\n      }\n      numbersPos.push(...tempNumb);\n    }\n    this._state = newState;\n    if (numbersPos.some((el) => el.isMoved || el.isMerged)) {\n      this.spawnNumber();\n      this.updateStatus();\n    }\n    return numbersPos;\n  }\n\n  getScore() {\n    return this._score;\n  }\n\n  getState() {\n    return structuredClone(this._state);\n  }\n\n  updateStatus() {\n    if (this.isWin()) {\n      this._status = 'win';\n    } else if (!this.canMove()) {\n      this._status = 'lose';\n    }\n  }\n\n  // Повертає поточний статус\n  getStatus() {\n    return this._status;\n  }\n\n  start() {\n    if (this._status === 'idle') {\n      this._status = 'playing';\n      this.spawnNumber();\n      this.spawnNumber();\n      this._score = 0;\n    }\n  }\n\n  reset() {\n    this._state = structuredClone(this._initialState);\n    this._score = 0;\n    this._status = 'idle';\n  }\n\n  restart() {\n    this.reset();\n  }\n\n  spawnNumber() {\n    const freeCell = [];\n    if (!this._state.some((row) => row.includes(0))) {\n      return false;\n    }\n    for (let i = 0; i < this._state.length; i++) {\n      for (let j = 0; j < this._state[i].length; j++) {\n        if (this._state[i][j] === 0) {\n          freeCell.push({\n            x: j, y: i,\n          });\n        }\n      }\n    }\n\n    const randPos = Math.floor(Math.random() * freeCell.length);\n    const newXpos = freeCell[randPos].x;\n    const newYpos = freeCell[randPos].y;\n\n    const PROPABILITY_PERCENT = 10;\n    const valuePropability = Math.random() * 100;\n    const number = valuePropability <= PROPABILITY_PERCENT ? 4 : 2;\n\n    this._state[newYpos][newXpos] = number;\n\n    return true;\n  }\n\n  isWin() {\n    return this._state.some((row) => row.includes(2048));\n  }\n\n  canMove() {\n    if (this._state.some((row) => row.includes(0))) {\n      return true;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this._state[i][j];\n        if (i < 3 && current === this._state[i + 1][j]) {\n          return true;\n        }\n        if (j < 3 && current === this._state[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","_initialState","_state","_status","_score","moveLeft","newState","numbersPos","i","length","tempNumb","newRow","filter","el","index","push","fromRow","fromCol","forEach","toRow","toCol","isMoved","Array","fill","j","splice","isMerged","some","spawnNumber","updateStatus","moveRight","unshift","moveUp","newCol","moveDown","getScore","getState","structuredClone","isWin","canMove","getStatus","start","reset","restart","freeCell","row","includes","x","y","randPos","Math","floor","random","newXpos","newYpos","valuePropability","current","$09e991522ca7e64e$var$table","document","querySelector","$09e991522ca7e64e$var$btnGame","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$isLocked","$09e991522ca7e64e$var$drawState","prevState","textContent","numRow","numCol","cell","rows","querySelectorAll","className","classList","add","toString","addEventListener","e","contains","$09e991522ca7e64e$var$start","blur","$09e991522ca7e64e$var$restartGame","remove","key"],"version":3,"file":"index.4e25aa9f.js.map"}